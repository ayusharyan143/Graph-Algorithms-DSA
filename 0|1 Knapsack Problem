// 0/1 Knapsack Problem


#include<bits/stdc++.h>
using namespace std ; 


int knapSackHelper(int capacity, vector<int> &profit, vector<int> &weight, int n, vector<vector<int>> &memo)
{

    if (n == 0 || capacity == 0)
    {
        return 0;
    }

    if (memo[n][capacity] != -1)
    {
        return memo[n][capacity];
    }

    if (weight[n - 1] > capacity)
    {
        memo[n][capacity] = knapSackHelper(capacity, profit, weight, n - 1, memo);
    }
    else
    {

        int include = profit[n - 1] + knapSackHelper(capacity - weight[n - 1], profit, weight, n - 1, memo);

        int exclude = knapSackHelper(capacity, profit, weight, n - 1, memo);
        
        memo[n][capacity] = max(include, exclude);
    }

    return memo[n][capacity];
}

int knapSack(int capacity, vector<int> &profit, vector<int> &weight, int n)
{

    vector<vector<int>> memo(n + 1, vector<int>(capacity + 1, -1));
    return knapSackHelper(capacity, profit, weight, n, memo);
}

int main()
{
    int bagCapacity = 4;
    vector<int> profit = {1, 2, 3};
    vector<int> weight = {4, 5, 1};

    int n = profit.size();

    cout << "Maximum value thief can generate: " << knapSack(bagCapacity, profit, weight, n) << endl;

    return 0;
}

